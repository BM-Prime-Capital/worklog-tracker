name: CI/CD

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-build:
    name: Typecheck, Build (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20]
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-cache-${{ runner.os }}-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/next.config.*') }}
          restore-keys: |
            next-cache-${{ runner.os }}-${{ matrix.node }}-

      - name: Install dependencies
        run: npm ci

      # Lint désactivé pour l'instant (peut être réactivé plus tard)
      # - name: Lint
      #   run: npm run lint -- --max-warnings=0

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Build
        env:
          NODE_ENV: production
        run: npm run build

  deploy-ec2:
    name: Deploy to EC2 (/var/www/worklog-tracker)
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [setup-and-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for rsync)
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare target dir (ensure ubuntu owns it)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          script_stop: true
          script: |
            sudo mkdir -p /var/www/worklog-tracker
            # Préserve .env s'il existe
            if [ -f /var/www/worklog-tracker/.env ]; then
              sudo chown ubuntu:ubuntu /var/www/worklog-tracker/.env
              sudo chmod 600 /var/www/worklog-tracker/.env
            fi
            sudo chown -R ubuntu:ubuntu /var/www/worklog-tracker

      - name: Rsync source to EC2 (preserve .env)
        run: |
          rsync -az --delete \
            --omit-dir-times --no-perms --no-owner --no-group \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude ".next" \
            --exclude ".env" \
            ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/worklog-tracker

      - name: Install, build & restart on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          script_stop: true
          script: |
            set -e
            cd /var/www/worklog-tracker

            # Vérifie Node via nvm si dispo
            if command -v nvm >/dev/null 2>&1; then
              export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
              nvm install 20
              nvm use 20
            fi

            # Dépendances + build
            npm ci
            npm run build

            # Redémarrage avec PM2 ou fallback systemd
            if command -v pm2 >/dev/null 2>&1; then
              pm2 describe worklog-tracker >/dev/null 2>&1 && pm2 reload worklog-tracker || pm2 start "npm -- start" --name worklog-tracker
              pm2 save
            elif systemctl list-units --type=service | grep -q worklog-tracker.service; then
              sudo systemctl restart worklog-tracker
            else
              nohup npm start >/tmp/worklog-tracker.log 2>&1 &
            fi

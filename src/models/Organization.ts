import mongoose, { Document, Schema } from 'mongoose'

export interface IOrganization extends Document {
  name: string
  slug: string // URL-friendly version of name
  description?: string
  ownerId: string // User ID of the organization owner
  jiraOrganization?: {
    organizationName: string
    domain: string
    email: string
    apiToken: string
  }
  settings: {
    timezone: string
    workingDays: string[] // ['monday', 'tuesday', etc.]
    workingHours: {
      start: string // '09:00'
      end: string // '17:00'
    }
    allowSelfRegistration: boolean
    requireEmailVerification: boolean
  }
  subscription: {
    plan: 'free' | 'pro' | 'enterprise'
    status: 'active' | 'inactive' | 'cancelled' | 'trial'
    trialEndsAt?: Date
    maxUsers: number
    features: string[]
  }
  branding: {
    logo?: string
    primaryColor?: string
    secondaryColor?: string
  }
  isActive: boolean
  createdAt: Date
  updatedAt: Date
}

const organizationSchema = new Schema<IOrganization>({
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  slug: {
    type: String,
    required: false, // Will be generated by pre-save hook
    unique: true,
    lowercase: true,
    trim: true,
    match: /^[a-z0-9-]+$/
  },
  description: {
    type: String,
    trim: true,
    maxlength: 500
  },
  ownerId: {
    type: String,
    required: true
  },
  jiraOrganization: {
    organizationName: String,
    domain: String,
    email: String,
    apiToken: String
  },
  settings: {
    timezone: {
      type: String,
      default: 'UTC'
    },
    workingDays: {
      type: [String],
      default: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],
      enum: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    },
    workingHours: {
      start: {
        type: String,
        default: '09:00'
      },
      end: {
        type: String,
        default: '17:00'
      }
    },
    allowSelfRegistration: {
      type: Boolean,
      default: false
    },
    requireEmailVerification: {
      type: Boolean,
      default: true
    }
  },
  subscription: {
    plan: {
      type: String,
      enum: ['free', 'pro', 'enterprise'],
      default: 'free'
    },
    status: {
      type: String,
      enum: ['active', 'inactive', 'cancelled', 'trial'],
      default: 'trial'
    },
    trialEndsAt: Date,
    maxUsers: {
      type: Number,
      default: 5 // Free plan limit
    },
    features: {
      type: [String],
      default: ['basic_worklog_tracking', 'team_management']
    }
  },
  branding: {
    logo: String,
    primaryColor: {
      type: String,
      default: '#3B82F6'
    },
    secondaryColor: {
      type: String,
      default: '#1E40AF'
    }
  },
  isActive: {
    type: Boolean,
    default: true
  }
}, {
  timestamps: true
})

// Generate slug from name before saving
organizationSchema.pre('save', function(next) {
  console.log('ðŸ”§ Pre-save hook triggered for organization:', this.name)
  console.log('ðŸ”§ Current slug:', this.slug)
  console.log('ðŸ”§ Name modified:', this.isModified('name'))
  
  // Always generate slug if it doesn't exist or if name has changed
  if (!this.slug || this.isModified('name')) {
    let slug = this.name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-+|-+$/g, '') // Remove leading and trailing dashes
    
    // Ensure slug is not empty
    if (!slug) {
      slug = 'organization-' + Date.now()
    }
    
    console.log('ðŸ”§ Generated slug:', slug)
    this.slug = slug
  }
  next()
})

export default mongoose.models.Organization || mongoose.model<IOrganization>('Organization', organizationSchema)